services:
  
  spring-publisher-service:
    restart: unless-stopped
    build:
      context: ./spring-publisher-service
      cache_from:
        - maven:3.9.6-eclipse-temurin-17
        - eclipse-temurin:17-jre-alpine
    image: publisher-service:${ENV:-dev}-${BUILD_VERSION:-latest}
    container_name: spring-publisher-service-${ENV:-dev}
  
    ports:
      - "${APP_PORT:-8080}:8080"

    env_file:
      - ./spring-publisher-service/config/.env.${ENV:-dev}

    depends_on:
      db-publisher-service:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      start_period: 90s 
      interval: 30s
      timeout: 10s
      retries: 3

    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M
      - /app/temp:size=50M 

    volumes:
      - type: bind
        source: ./spring-publisher-service/./logs
        target: /app/logs
        bind:
          create_host_path: true
      - type: bind
        source: ./spring-publisher-service/.m2
        target: /root/.m2
        bind:
          create_host_path: true
      - type: bind
        source: ./spring-publisher-service/target
        target: /app/target
        bind:
          create_host_path: true

    networks:
      - publisher-network

  angular-publisher-service:
      restart: unless-stopped
      build:
        context: ./angular-publisher-service 
        target: ${DOCKER_TARGET:-development}
        args:
          - NG_ENV=${ANGULAR_ENV:-dev}
          - NODE_ENV=${NODE_ENV:-development}
      
      image: angular-publisher-service:${ENV:-dev}-${BUILD_VERSION:-latest}
      container_name: angular-publisher-service-${ENV:-dev}

      ports:
        # For development: 4200, for production: 80
        - "${ANGULAR_PORT:-4200}:${ANGULAR_INTERNAL_PORT:-4200}"

      depends_on:
        spring-publisher-service:
          condition: service_healthy


      healthcheck:
        test: |
          curl -f http://angular-publisher-service:${ANGULAR_INTERNAL_PORT:-4200} || exit 1
        start_period: 60s
        interval: 30s
        timeout: 10s
        retries: 3

      volumes:
        # Only mount source code in development mode
        - type: bind
          source: ./angular-publisher-service
          target: /app
          bind:
            create_host_path: true
          # Use Docker Compose profiles to conditionally mount
          x-development-only: true
        
        # Node modules volume for better performance
        - type: volume
          source: node_modules-${ENV:-dev}
          target: /app/node_modules

      networks:
        - publisher-network
    
  db-publisher-service:
    restart: unless-stopped
    image: postgres:15-alpine
    container_name: publisher-db-${ENV:-dev}

    security_opt:
      - no-new-privileges:true

    env_file:
      - ./spring-publisher-service/config/.env.${ENV:-dev}

    environment:
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256

    volumes:
      - pgdata-${ENV:-dev}:/var/lib/postgresql/data

    ports:
      - "${POSTGRES_PORT:-5434}:5432"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-publisher} -h localhost"]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - publisher-network

    shm_size: 256M

  e2e-publisher-service:
    build:
      context: ./playwright-e2e-testing
      dockerfile: Dockerfile
    image: e2e-publisher-service:latest

    depends_on:
      - spring-publisher-service
      - angular-publisher-service

    environment:
      TEST_ENV: ${ENV:-dev}

    volumes:
      - ./playwright-e2e-testing:/e2e:cached
      - ${HOME}/.m2:/root/.m2


    networks:
      - publisher-network
      

networks:
  publisher-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500

volumes:
  pgdata-dev:
    driver: local
  pgdata-staging:
    driver: local
  pgdata-prod:
    driver: local
  
  node_modules-dev:
    driver: local
  node_modules-staging:
    driver: local
  node_modules-prod:
    driver: local