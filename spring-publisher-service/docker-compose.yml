services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENV: ${ENV:-dev}
        MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
      target: production
      # Enable BuildKit caching for faster builds
      cache_from:
        - maven:3.9.6-eclipse-temurin-17
        - eclipse-temurin:17-jre-alpine
      # Use inline cache for better performance
      x-bake:
        cache-to: type=inline
        cache-from: type=registry,ref=publisher-service:cache
    image: publisher-service:${ENV:-dev}-${BUILD_VERSION:-latest}
    container_name: publisher-service-${ENV:-dev}
    restart: unless-stopped

    # Port mapping with environment-specific defaults
    ports:
      - "${APP_PORT:-8080}:8080"

    # Load environment-specific configuration
    env_file:
      - ./config/.env.${ENV:-dev}

    # Enhanced environment variables
    environment:
      - SPRING_PROFILES_ACTIVE=${ENV:-dev}
      - ENV=${ENV:-dev}
      - JAVA_OPTS=-Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Xmx512m -Xms256m
      # JVM optimizations for faster startup
      - JAVA_TOOL_OPTIONS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication

    # Service dependencies
    depends_on:
      db:
        condition: service_healthy

    # Updated health check using wget (Alpine doesn't have curl by default)
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      start_period: 90s  # Increased start period for Spring Boot
      interval: 30s
      timeout: 10s
      retries: 3

    # Security and resource limits
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M
      - /app/temp:size=50M  # Additional temp space for Spring Boot

    # Enhanced volumes configuration
    volumes:
      - type: bind
        source: ./logs
        target: /app/logs
        bind:
          create_host_path: true
      # Mount Maven cache for faster rebuilds during development
      - type: bind
        source: ./.m2
        target: /root/.m2
        bind:
          create_host_path: true
      # Optional: Mount target directory for faster development builds
      - type: bind
        source: ./target
        target: /app/target
        bind:
          create_host_path: true

    networks:
      - publisher-network

    # Resource limits for better performance
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  db:
    image: postgres:15-alpine
    container_name: publisher-db-${ENV:-dev}
    restart: unless-stopped

    # Security settings
    security_opt:
      - no-new-privileges:true

    env_file:
      - ./config/.env.${ENV:-dev}

    # Enhanced environment variables for better performance
    environment:
      # PostgreSQL performance tuning
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256

    # Persistent data storage
    volumes:
      - pgdata-${ENV:-dev}:/var/lib/postgresql/data

    # Port mapping (different default ports for each environment)
    ports:
      - "${POSTGRES_PORT:-5434}:5432"

    # Enhanced health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-publisher} -h localhost"]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - publisher-network

    # Resource limits for PostgreSQL
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

    # Shared memory for PostgreSQL performance
    shm_size: 256M

networks:
  publisher-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500

volumes:
  # Environment-specific database volumes
  pgdata-dev:
    driver: local
  pgdata-staging:
    driver: local
  pgdata-prod:
    driver: local